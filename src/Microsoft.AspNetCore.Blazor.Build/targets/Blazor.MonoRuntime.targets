<Project>

  <PropertyGroup>
    <PrepareBlazorRuntimeDependsOn>
      $(PrepareBlazorRuntimeDependsOn);
    </PrepareBlazorRuntimeDependsOn>
  </PropertyGroup>


  <Target Name="PrepareBlazorRuntime" DependsOnTargets="$(PrepareBlazorRuntimeDependsOn)" AfterTargets="Build">
    <Message Importance="high" text="Blazor Runtime" />    
  </Target>

  <Target Name="PrepareBlazorOutput" AfterTargets="PrepareBlazorRuntime">
    <ItemGroup>
      <_BlazorRuntimeOutputFolder Include="@(BlazorRuntimeOutputFolder->'$(OutputPath)%(Identity)')" />
    </ItemGroup>
    <PropertyGroup>
      <_BlazorRuntimeAsmjsOutputPath>$(OutputPath)$(BlazorRuntimeAsmjsOutputPath)</_BlazorRuntimeAsmjsOutputPath>
      <_BlazorRuntimeWasmOutputPath>$(OutputPath)$(BlazorRuntimeWasmOutputPath)</_BlazorRuntimeWasmOutputPath>
      <_BlazorRuntimeBclOutputPath>$(OutputPath)$(BlazorRuntimeBclOutputPath)</_BlazorRuntimeBclOutputPath>
      <_BlazorJsOutputPath>$(OutputPath)$(BlazorJsOutputPath)</_BlazorJsOutputPath>      
    </PropertyGroup>
    <Copy SourceFiles="@(MonoAsmjsFile)" DestinationFolder="$(_BlazorRuntimeAsmjsOutputPath)" />
    <Copy SourceFiles="@(MonoWasmFile)" DestinationFolder="$(_BlazorRuntimeWasmOutputPath)" />
    <Copy SourceFiles="@(BlazorJsFile)" DestinationFolder="$(_BlazorJsOutputPath)" />
  </Target>

  <Target Name="RunLinker" AfterTargets="PrepareBlazorRuntime">
    <PropertyGroup>
      <LinkerOutputPath>$(OutputPath)$(BlazorRuntimeBclOutputPath)</LinkerOutputPath>
    </PropertyGroup>
    <ItemGroup>
      <AssembliesToLink Include="@(ReferenceCopyLocalPaths->WithMetadataValue('Extension','.dll')->'-a %(Identity)')" />
      <AssembliesToLink Include="@(MainAssembly->'-a %(FullPath)')" />
      <FolderLookupPaths Include="@(MonoBaseClassLibraryFolder->'-d %(Identity)')" />
      <AppReferences Include="@(MonoBCLFile);@(MainAssembly->'%(FullPath)');@(ReferenceCopyLocalPaths->WithMetadataValue('Extension','.dll'))" />
      <AppReferences Remove="@(MonoBCLFacadeFile)" />
    </ItemGroup>
    <Exec Condition="$(BlazorLinkerEnabled) == 'true'" Command="dotnet $(MonoLinkerPath) $(AdditionalMonoLinkerOptions) @(FolderLookupPaths, ' ') -o $(LinkerOutputPath) @(AssembliesToLink, ' ')" />
    <Copy Condition="$(BlazorLinkerEnabled) == ''" SourceFiles="@(AppReferences)" DestinationFolder="$(LinkerOutputPath)" />
  </Target>

  <Target Name="BuildBlazorApp" AfterTargets="RunLinker" Inputs="$(ProjectDir)**" Outputs="$(ProjectDir)$(OutDir)dist\**">
    <PropertyGroup>
      <WebRootName>wwwroot/</WebRootName>
      <WebRootPath>$(ProjectDir)$(WebRootName)</WebRootPath>
      <IndexHtml>$(WebRootPath)Index.html</IndexHtml>
      <WebRootParam Condition="Exists('$(WebRootPath)')">--webroot &quot;$(WebRootPath)&quot;</WebRootParam>
      <IndexHtmlOutputPath>$(ProjectDir)$(OutputPath)dist/Index.html</IndexHtmlOutputPath>
    </PropertyGroup>
    <ItemGroup>
      <AppBinaries Include="$(OutputPath)$(BlazorRuntimeBclOutputPath)**/*.dll" />
      <AppBinaries Remove="$(OutputPath)$(BlazorRuntimeBclOutputPath)**/$(AssemblyName).dll" />
    </ItemGroup>
    <!-- TODO: Find the correct time to run this (right after assemblies were written) -->
    <Exec Condition="Exists('$(IndexHtml)')" Command="$(BlazorBuildExe) build @(MainAssembly) -hp $(IndexHtml) @(AppBinaries->'-r %(FileName)%(Extension)', ' ') -o $(IndexHtmlOutputPath)" />
  </Target>

</Project>